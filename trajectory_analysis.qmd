---
title: "Gaza Drift Trajectory Analysis"
format:
  html:
    theme: cosmo
    toc: true
---

```{python}
import pandas as pd
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import cartopy.crs as ccrs
```

## Load Trajectory Data

The analysis expects either a NetCDF file `trajectories.nc` or a CSV file
`trajectories.csv` containing particle tracks. Columns should include at
least `particle_id`, `release_id`, `segment`, `transit_hours` and `time`.

```{python}
traj_file = None
for ext in ("*.nc", "*.csv"):
    files = list(Path('.').glob(ext))
    if files:
        traj_file = files[0]
        break

if traj_file is None:
    raise FileNotFoundError("No trajectories file found")

if traj_file.suffix == '.nc':
    ds = xr.open_dataset(traj_file)
    df = ds.to_dataframe().reset_index()
else:
    df = pd.read_csv(traj_file)

# Ensure the 'time' column is parsed as datetime so pandas .dt methods work
if 'time' in df.columns:
    df['time'] = pd.to_datetime(df['time'])

df.head()
```

## Aggregate Arrivals by Segment

Count arrivals at each of Gaza's eight shoreline segments for every
release point and compute transit statistics.

```{python}
# Gracefully handle trajectories missing a 'segment' column
if 'segment' not in df.columns:
    # Assign a single default segment so aggregation still works
    df['segment'] = 'Unknown'

summary = (
    df.groupby(['release_id', 'segment'])
      .agg(arrivals=('particle_id', 'count'),
           mean_transit=('transit_hours', 'mean'),
           min_transit=('transit_hours', 'min'))
      .reset_index()
)
summary.head()
```

### Heatmap of Arrival Frequency

```{python}
# Use pivot_table for robustness and explicit keywords
heat = summary.pivot_table(
    index='release_id',
    columns='segment',
    values='arrivals',
    aggfunc='sum',
    fill_value=0
)
plt.figure(figsize=(8,6))
sns.heatmap(heat, annot=True, cmap='viridis')
plt.title('Arrivals per Release Point and Gaza Segment')
plt.ylabel('Release Point')
plt.xlabel('Gaza Segment')
plt.tight_layout()
plt.show()
```

## Example Trajectory Map

```{python}
example_date = df['time'].min()
mask = df['time'].dt.date == example_date.date()
example = df[mask]

fig = plt.figure(figsize=(8,6))
ax = plt.axes(projection=ccrs.PlateCarree())
for seg, seg_df in example.groupby('segment'):
    ax.plot(seg_df['lon'], seg_df['lat'], label=f'Segment {seg}',
            transform=ccrs.PlateCarree())
ax.coastlines()
ax.legend(title='Gaza Segment')
ax.set_xlabel('Longitude')
ax.set_ylabel('Latitude')
ax.set_title(f'Trajectories on {example_date.date()}')
plt.show()
```

## Ranked Release Locations

```{python}
# Load release schedule
schedule = pd.read_csv('release_schedule_15min.csv')

# Total arrivals and fastest transit for each release location
totals = (
    summary.groupby('release_id')
           .agg(total_arrivals=('arrivals', 'sum'),
                fastest_time=('min_transit', 'min'))
           .reset_index()
)

# Gaza segment with the most arrivals for each release
best_seg = summary.loc[summary.groupby('release_id')['arrivals'].idxmax(),
                       ['release_id', 'segment', 'arrivals']]
best_seg = best_seg.rename(columns={'segment': 'best_segment',
                                    'arrivals': 'best_segment_arrivals'})

rank_release = (totals.merge(best_seg, on='release_id')
                        .merge(schedule, on='release_id', how='left'))
rank_release = rank_release.sort_values('total_arrivals', ascending=False)
rank_release.index = range(1, len(rank_release) + 1)
rank_release[['release_id', 'lat', 'lon', 'best_segment', 'release_time',
              'total_arrivals', 'fastest_time']]
```

## Ranked Gaza Segments

```{python}
# Total arrivals to each Gaza segment
seg_totals = (summary.groupby('segment')['arrivals']
                        .sum()
                        .reset_index(name='total_arrivals'))

# Top contributing release location for each segment
top_src = summary.loc[summary.groupby('segment')['arrivals'].idxmax(),
                      ['segment', 'release_id', 'arrivals']]
top_src = top_src.rename(columns={'release_id': 'top_source_location',
                                  'arrivals': 'source_arrivals'})

seg_rank = seg_totals.merge(top_src, on='segment')
seg_rank = seg_rank.sort_values('total_arrivals', ascending=False)
seg_rank.index = range(1, len(seg_rank) + 1)
seg_rank
```

## Gaza Segment Productivity

```{python}
prod_table = summary.groupby('segment')['arrivals'].mean().reset_index(name='avg_arrivals')
prod_table
```

```{python}
prod_table.set_index('segment')[
    'avg_arrivals'
].plot.bar(color='skyblue', figsize=(8,4))
plt.xlabel('Gaza Segment')
plt.ylabel('Average Arrivals')
plt.title('Average Arrival Frequency by Segment')
plt.tight_layout()
plt.show()
```
